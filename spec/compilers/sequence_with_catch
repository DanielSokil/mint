module Promise {
  fun reject (input : a) : Promise(a, b) {
    ``
  }
}

component Main {
  fun test : Promise(Never, String) {
    sequence {
      greeting =
        Promise.reject("x")

      b =
        Promise.reject("y")

      a =
        Promise.reject(0)

      "blah"
    } catch String => a {
      a
    } catch Number => a {
      "asd"
    }
  }

  fun render : Html {
    try {
      test()

      <div/>
    }
  }
}
--------------------------------------------------------------------------------
const B = new(class extends _M {
  c(h) {
    return
  }
})

class A extends _C {
  a() {
    return (async () => {
      let _ = null

      try {
        let b = await (async () => {
          try {
            return await B.c(`x`)
          } catch (_error) {
            let d = _error
            _ = d
            throw new DoError()
          }
        })()

        let e = await (async () => {
          try {
            return await B.c(`y`)
          } catch (_error) {
            let d = _error
            _ = d
            throw new DoError()
          }
        })()

        let f = await (async () => {
          try {
            return await B.c(0)
          } catch (_error) {
            let g = _error
            _ = `asd`
            throw new DoError()
          }
        })()

        _ = await `blah`
      } catch (_error) {
        if (!(_error instanceof DoError)) {
          console.warn(`Unhandled error in sequence expression:`)
          console.warn(_error)
        }
      }

      return _
    })()
  }

  render() {
    return (() => {
      this.a()
      return _h("div", {})
    })()
  }
}

A.displayName = "Main"
