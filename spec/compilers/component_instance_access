enum Maybe(value) {
  Just(value)
}

component Instance {
  get name : String {
    "Instance"
  }

  fun render : Html {
    <div></div>
  }
}

component Main {
  fun handleClick : Maybe(String) {
    instance&.name
  }

  fun render : Html {
    <div onClick={handleClick}>
      <Instance as instance/>
    </div>
  }
}
--------------------------------------------------------------------------------
class C extends _E {
  constructor(_0) {
    super()
    this._0 = _0
    this.length = 1
  }
}

class A extends _C {
  get a() {
    return `Instance`
  }

  render() {
    return _h("div", {})
  }
}

A.displayName = "Instance"

class B extends _C {
  b() {
    return (() => {
      const _ = this._instance
      return _s(_,(_) => _.a)
    })()
  }

  render() {
    return _h("div", {
      "onClick": (event => (this.b)(_normalizeEvent(event)))
    }, [
      _h(A, {
        ref: (instance) => { this._instance = new C(instance) }
      })
    ])
  }
}

B.displayName = "Main"
