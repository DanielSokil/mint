enum Result(error, value) {
  Err(error)
  Ok(value)
}

component Main {
  fun test : Result(String, value) {
    try {
      x =
        Result::Err("Hello")

      Result::Ok(x)
    } catch String => error {
      Result::Err(error)
    }
  }

  fun render : String {
    try {
      x = test()

      "success"
    } catch String => error {
      "error"
    }
  }
}
--------------------------------------------------------------------------------
class B extends _E {
  constructor(_0) {
    super();
    this._0 = _0;
    this.length = 1;
  }
};

class C extends _E {
  constructor(_0) {
    super();
    this._0 = _0;
    this.length = 1;
  }
};

class A extends _C {
  a() {
    return (() => {
      let _0 = new B(`Hello`);

      if (_0 instanceof Err) {
        let _error = _0._0;

        let b = _error;
        return new B(b);
      };

      let c = _0._0;

      return new C(c);
    })();
  }

  render() {
    return (() => {
      let _0 = this.a();

      if (_0 instanceof Err) {
        let _error = _0._0;

        let d = _error;
        return `error`;
      };

      let e = _0._0;

      return `success`;
    })();
  }
};

A.displayName = "Main";
