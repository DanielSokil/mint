record MouseProvider.Data {
  moves : Function(Position, Void),
  ups : Function(Position, Void)
}

provider MouseProvider : MouseProvider.Data {
  fun attach : Void {
    void
  }
}

store Blah {
  state test : String = ""

  fun x : String {
    "hello"
  }
}

component Main {
  use MouseProvider {
    moves = (data : Position) : Void { void },
    ups = (data : Position) : Void { void }
  } when {
    false
  }

  connect Blah exposing { test, x }

  fun render : Html {
    <div/>
  }
}
--------------------------------------------------------------------------------
class $$MouseProvider_Data extends Record {}

$$MouseProvider_Data.mappings = {
  "moves": null,
  "ups": null
}

$$MouseProvider_Data.decode = () => {
  console.warn('Cannot decode this record!')
}

const $MouseProvider = new(class extends Provider {
  attach() {
    return null
  }
})

class $Main extends Component {
  get test() {
    return $Blah.test
  }

  x(...params) {
    return $Blah.x(...params)
  }

  componentWillUnmount() {
    $Blah._unsubscribe(this);
    $MouseProvider._unsubscribe(this)
  }

  componentDidUpdate() {
    if (false) {
      $MouseProvider._subscribe(this, new $$MouseProvider_Data({
        moves: ((data) => {
          return null
        }),
        ups: ((data) => {
          return null
        })
      }))
    } else {
      $MouseProvider._unsubscribe(this)
    }
  }

  componentDidMount() {
    $Blah._subscribe(this);
    if (false) {
      $MouseProvider._subscribe(this, new $$MouseProvider_Data({
        moves: ((data) => {
          return null
        }),
        ups: ((data) => {
          return null
        })
      }))
    } else {
      $MouseProvider._unsubscribe(this)
    }
  }

  render() {
    return _createElement("div", {})
  }
}

$Main.displayName = "Main"

const $Blah = new(class extends Store {
  constructor() {
    super()
    this.state = {
      test: ``
    }
  }

  get test() {
    return this.state.test
  }

  x() {
    return `hello`
  }
})
$Blah.__displayName = `Blah`
