module Promise {
  fun reject (input : a) : Promise(a, b) {
    ``
  }
}

component Main {
  fun test : Promise(Never, String) {
    parallel {
      greeting =
        Promise.reject("x")

      b =
        Promise.reject("y")

      a =
        Promise.reject(0)
    } then {
      "blah"
    } catch String => a {
      "hello"
    } catch Number => a {
      "asd"
    }
  }

  fun render : String {
    try {
      test()

      ""
    }
  }
}
--------------------------------------------------------------------------------
const B = new(class extends _M {
  c(h) {
    return
  }
})

class A extends _C {
  a() {
    return (async () => {
      let _ = null

      try {
        let b = null
        let e = null
        let f = null

        await Promise.all([
          (async () => {
            try {
              b = await B.c(`x`)
            } catch (_error) {
              let d = _error
              _ = `hello`
              throw new DoError()
            }
          })(),
          (async () => {
            try {
              e = await B.c(`y`)
            } catch (_error) {
              let d = _error
              _ = `hello`
              throw new DoError()
            }
          })(),
          (async () => {
            try {
              f = await B.c(0)
            } catch (_error) {
              let g = _error
              _ = `asd`
              throw new DoError()
            }
          })()
        ])

        _ = `blah`
      } catch (_error) {
        if (!(_error instanceof DoError)) {
          console.warn(`Unhandled error in parallel expression:`)
          console.warn(_error)
        }
      }

      return _
    })()
  }

  render() {
    return (() => {
      this.a()
      return ``
    })()
  }
}

A.displayName = "Main"
