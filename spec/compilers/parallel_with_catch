module Promise {
  fun reject (input : a) : Promise(a, b) {
    ``
  }
}

component Main {
  fun test : Promise(Never, String) {
    parallel {
      greeting =
        Promise.reject("x")

      b =
        Promise.reject("y")

      a =
        Promise.reject(0)
    } then {
      "blah"
    } catch String => a {
      "hello"
    } catch Number => a {
      "asd"
    }
  }

  fun render : String {
    try {
      test()

      ""
    }
  }
}
--------------------------------------------------------------------------------
const $Promise = new(class {
  reject(input) {
    return
  }
})

class $Main extends Component {
  test() {
    return (async () => {
      let _result = null;

      try {
        let greeting = null;
        let b = null;
        let a = null;

        await Promise.all([
          (async () => {
            try {
              greeting = await $Promise.reject(`x`)
            } catch (_error) {
              let a = _error;

              _result = `hello`

              throw new DoError()
            }
          })(),

          (async () => {
            try {
              b = await $Promise.reject(`y`)
            } catch (_error) {
              let a = _error;

              _result = `hello`

              throw new DoError()
            }
          })(),

          (async () => {
            try {
              a = await $Promise.reject(0)
            } catch (_error) {
              let a = _error;

              _result = `asd`

              throw new DoError()
            }
          })()
        ])

        _result = `blah`
      } catch (_error) {
        if (_error instanceof DoError) {} else {
          console.warn(`Unhandled error in parallel expression:`)
          console.warn(_error)
        }
      }

      return _result
    })()
  }

  render() {
    return (() => {
      this.test.bind(this)()

      return ``
    })()
  }
}

$Main.displayName = "Main"
