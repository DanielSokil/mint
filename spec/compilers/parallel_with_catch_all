module Promise {
  fun reject (input : a) : Promise(a, b) {
    ``
  }
}

component Main {
  fun test : Promise(Never, String) {
    parallel {
      greeting =
        Promise.reject("x")

      a =
        "Hello"

      b =
        "World"
    } then {
      a + b
    } catch {
      "Hmm..."
    }
  }

  fun render : String {
    try {
      test()

      ""
    }
  }
}
--------------------------------------------------------------------------------
const $Promise = new(class extends Module {
  reject(input) {
    return
  }
})

class $Main extends Component {
  test() {
    return (async () => {
      let _result = null;

      try {
        let greeting = null;
        let a = null;
        let b = null;

        await Promise.all([
          (async () => {
            greeting = await $Promise.reject(`x`)
          })(),

          (async () => {
            a = await `Hello`
          })(),

          (async () => {
            b = await `World`
          })()
        ])

        _result = a + b
      } catch (_error) {
        if (_error instanceof DoError) {} else {
          return `Hmm...`
        }
      }

      return _result
    })()
  }

  render() {
    return (() => {
      this.test()

      return ``
    })()
  }
}

$Main.displayName = "Main"
