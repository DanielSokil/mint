component Main {
  fun a : String {
    "Hello"
  }

  fun b : String {
    a()
  }

  fun render : Html {
    <div/>
  }
}
-----------------------------------------------------------------VariableMissing
component Main {
  fun b : String {
    x()
  }

  fun render : Html {
    try {
      b()

      <div/>
    }
  }
}
----------------------------------------------------------------CallNotAFunction
component Main {
  property x : String = ""

  fun b : String {
    x()
  }

  fun render : Html {
    try {
      b()

      <div/>
    }
  }
}
--------------------------------------------------------CallArgumentTypeMismatch
component Main {
  fun a (input : String) : String {
    input
  }

  fun b : String {
    a(0)
  }

  fun render : Html {
    try {
      b()

      <div/>
    }
  }
}
--------------------------------------------------------CallArgumentSizeMismatch
component Main {
  fun a (input : String) : String {
    input
  }

  fun b : String {
    a("Hello", "There")
  }

  fun render : Html {
    try {
      b()

      <div/>
    }
  }
}
--------------------------------------------------------------------------------
module Maybe {
  fun nothing : Maybe(a) {
    ``
  }

  fun just (value : a) : Maybe(a) {
    ``
  }

  fun withDefault (value : a, maybe : Maybe(a)) : a {
    ``
  }

  fun toResult (error : b, maybe : Maybe(a)) : Result(b, a) {
    ``
  }
}

record Nested {
  x : String
}

record Test {
  name : String,
  nested : Nested
}

store X {
  state test : Maybe(Test) = Maybe.nothing()
}

component Main {
  connect X exposing { test }

  fun render : String {
    try {
      resolved =
        test
        |> Maybe.toResult("Blah")

      resolved.nested.x
    } catch String => error {
      error
    }
  }
}
